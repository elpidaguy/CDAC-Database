\1.Write a function to compute the following. Function
should take Emp_ num and return
the cost to company.
DA = 15% Salary, HRA= 20% of Salary, TA= 8% of Salary.
Special Allowance will be decided based on the service in
the company.
< 1 Year Nil
>=1 Year< 2 Year 10% of Salary
>=2 Year< 4 Year 20% of Salary
>4 Year 30% of Salary

delimiter //
create function calc_sal(emp_num int) returns int
begin
declare vda,vhra,vta,vresult,gsal,vsal,vxp int ; 

select sal,timestampdiff(year,hiredate,curdate()) into vsal, vxp from emp where empno=emp_num;

set vda=vsal*0.15,vhra=vsal*0.20,vta=vsal*0.08; 

if vxp < 1 then
	set vsal = vsal;
elseif vxp >= 1 and vxp < 2 then
	set vsal=vsal*1.10;
elseif vxp >= 2 and vxp <4 then
	set vsal=vsal*1.20;
elseif vxp > 4 then
	set vsal=vsal*1.30;
end if;

set gsal=vsal+vda+vhra+vta;
return gsal;

end//

delimiter ;


//output

mysql> select ename,calc_sal(empno)
    -> from emp;
+--------+-----------------+
| ename  | calc_sal(empno) |
+--------+-----------------+
| SMITH  |            1384 |
| ALLEN  |            2768 |
| WARD   |            2163 |
| JONES  |            5147 |
| MARTIN |            2163 |
| BLAKE  |            4931 |
| CLARK  |            4239 |
| SCOTT  |            5190 |
| KING   |            8650 |
| TURNER |            2595 |
| ADAMS  |            1903 |
| JAMES  |            1644 |
| FORD   |            5190 |
| MILLER |            2249 |
+--------+-----------------+
14 rows in set (0.00 sec)


-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
2.


delimiter //
create procedure sal_check()
begin

declare vempname,vdeptname,vjob,vsalstat varchar(100);
declare vsal,vavgsal int default 0;
declare cend int default 0;
declare mycur cursor for select e.sal,e.ename, d.dname,e.job, (select avg(sal) from emp where deptno = e.deptno)
from emp e inner join dept d on e.deptno =  d.deptno;
declare continue handler for NOT FOUND set cend = 1;
open mycur;

looplabel1: loop
fetch mycur into vsal,vempname,vdeptname,vjob,vavgsal;

if cend = 1 then
	leave looplabel1;
end if;

if vavgsal < vsal then
	set vsalstat = "Sal is greater than avg sal of dept";
elseif vavgsal > vsal then
	set vsalstat = "Sal is Lesser then avg sal of dept"; 
elseif vavgsal = vsal then
	set vsalstat = "Sal is Equal to Avg Sal of Dept";
end if;

select vsal,vempname,vdeptname,vjob,vavgsal,vsalstat;

end loop;

close mycur;
end//

delimiter ;

-------------------------------output----------------------
mysql> call sal_check
    -> ;
+------+----------+-----------+-------+---------+------------------------------------+
| vsal | vempname | vdeptname | vjob  | vavgsal | vsalstat                           |
+------+----------+-----------+-------+---------+------------------------------------+
|  800 | SMITH    | RESEARCH  | CLERK |    2175 | Sal is Lesser then avg sal of dept |
+------+----------+-----------+-------+---------+------------------------------------+
1 row in set (0.00 sec)

+------+----------+-----------+----------+---------+-------------------------------------+
| vsal | vempname | vdeptname | vjob     | vavgsal | vsalstat                            |
+------+----------+-----------+----------+---------+-------------------------------------+
| 1600 | ALLEN    | SALES     | SALESMAN |    1567 | Sal is greater than avg sal of dept |
+------+----------+-----------+----------+---------+-------------------------------------+
1 row in set (0.01 sec)

+------+----------+-----------+----------+---------+------------------------------------+
| vsal | vempname | vdeptname | vjob     | vavgsal | vsalstat                           |
+------+----------+-----------+----------+---------+------------------------------------+
| 1250 | WARD     | SALES     | SALESMAN |    1567 | Sal is Lesser then avg sal of dept |
+------+----------+-----------+----------+---------+------------------------------------+
1 row in set (0.02 sec)

+------+----------+-----------+---------+---------+-------------------------------------+
| vsal | vempname | vdeptname | vjob    | vavgsal | vsalstat                            |
+------+----------+-----------+---------+---------+-------------------------------------+
| 2975 | JONES    | RESEARCH  | MANAGER |    2175 | Sal is greater than avg sal of dept |
+------+----------+-----------+---------+---------+-------------------------------------+
1 row in set (0.03 sec)

+------+----------+-----------+----------+---------+------------------------------------+
| vsal | vempname | vdeptname | vjob     | vavgsal | vsalstat                           |
+------+----------+-----------+----------+---------+------------------------------------+
| 1250 | MARTIN   | SALES     | SALESMAN |    1567 | Sal is Lesser then avg sal of dept |
+------+----------+-----------+----------+---------+------------------------------------+
1 row in set (0.04 sec)

+------+----------+-----------+---------+---------+-------------------------------------+
| vsal | vempname | vdeptname | vjob    | vavgsal | vsalstat                            |
+------+----------+-----------+---------+---------+-------------------------------------+
| 2850 | BLAKE    | SALES     | MANAGER |    1567 | Sal is greater than avg sal of dept |
+------+----------+-----------+---------+---------+-------------------------------------+
1 row in set (0.05 sec)

+------+----------+------------+---------+---------+------------------------------------+
| vsal | vempname | vdeptname  | vjob    | vavgsal | vsalstat                           |
+------+----------+------------+---------+---------+------------------------------------+
| 2450 | CLARK    | ACCOUNTING | MANAGER |    2917 | Sal is Lesser then avg sal of dept |
+------+----------+------------+---------+---------+------------------------------------+
1 row in set (0.06 sec)

+------+----------+-----------+---------+---------+-------------------------------------+
| vsal | vempname | vdeptname | vjob    | vavgsal | vsalstat                            |
+------+----------+-----------+---------+---------+-------------------------------------+
| 3000 | SCOTT    | RESEARCH  | ANALYST |    2175 | Sal is greater than avg sal of dept |
+------+----------+-----------+---------+---------+-------------------------------------+
1 row in set (0.07 sec)

+------+----------+------------+-----------+---------+-------------------------------------+
| vsal | vempname | vdeptname  | vjob      | vavgsal | vsalstat                            |
+------+----------+------------+-----------+---------+-------------------------------------+
| 5000 | KING     | ACCOUNTING | PRESIDENT |    2917 | Sal is greater than avg sal of dept |
+------+----------+------------+-----------+---------+-------------------------------------+
1 row in set (0.08 sec)

+------+----------+-----------+----------+---------+------------------------------------+
| vsal | vempname | vdeptname | vjob     | vavgsal | vsalstat                           |
+------+----------+-----------+----------+---------+------------------------------------+
| 1500 | TURNER   | SALES     | SALESMAN |    1567 | Sal is Lesser then avg sal of dept |
+------+----------+-----------+----------+---------+------------------------------------+
1 row in set (0.09 sec)

+------+----------+-----------+-------+---------+------------------------------------+
| vsal | vempname | vdeptname | vjob  | vavgsal | vsalstat                           |
+------+----------+-----------+-------+---------+------------------------------------+
| 1100 | ADAMS    | RESEARCH  | CLERK |    2175 | Sal is Lesser then avg sal of dept |
+------+----------+-----------+-------+---------+------------------------------------+
1 row in set (0.10 sec)

+------+----------+-----------+-------+---------+------------------------------------+
| vsal | vempname | vdeptname | vjob  | vavgsal | vsalstat                           |
+------+----------+-----------+-------+---------+------------------------------------+
|  950 | JAMES    | SALES     | CLERK |    1567 | Sal is Lesser then avg sal of dept |
+------+----------+-----------+-------+---------+------------------------------------+
1 row in set (0.11 sec)

+------+----------+-----------+---------+---------+-------------------------------------+
| vsal | vempname | vdeptname | vjob    | vavgsal | vsalstat                            |
+------+----------+-----------+---------+---------+-------------------------------------+
| 3000 | FORD     | RESEARCH  | ANALYST |    2175 | Sal is greater than avg sal of dept |
+------+----------+-----------+---------+---------+-------------------------------------+
1 row in set (0.12 sec)

+------+----------+------------+-------+---------+------------------------------------+
| vsal | vempname | vdeptname  | vjob  | vavgsal | vsalstat                           |
+------+----------+------------+-------+---------+------------------------------------+
| 1300 | MILLER   | ACCOUNTING | CLERK |    2917 | Sal is Lesser then avg sal of dept |
+------+----------+------------+-------+---------+------------------------------------+
1 row in set (0.14 sec)

Query OK, 0 rows affected (0.15 sec)

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

5.
Write a procedure that accept Emp_num and update
the salary and store the old salary
details in Emp _Back (Emp _Back has the same structure
without any
constraint) table.
Exp< 2 then no Update
Exp> 2 and < 5 then 20% of salary
Exp> 5 then 25% of salary

delimiter //
create trigger takeBackup after update on emp
FOR EACH ROW
	if OLD.sal != NEW.sal then
		insert into emp_back values(OLD.EMPNO,OLD.ENAME,OLD.JOB,OLD.MGR,OLD.HIREDATE,NEW.SAL,OLD.COMM,OLD.DEPTNO);
	end if//
delimiter ;

delimiter //

create procedure updateSal(in pempno int)
begin

declare vsal,vexp int default 0;
declare vupdateval decimal(10,2);
select sal,timestampdiff(year, hiredate, curdate()) into vsal,vexp from emp where empno = pempno;

if vexp > 2 and vexp < 5 then
	set vupdateval = vsal*1.20;
	update emp set sal = vupdateval where empno=pempno;
elseif vexp > 5 then
	set vupdateval = vsal*1.25;
	update emp set sal = vupdateval where empno=pempno;
end if;

end//

delimiter ;



OUTPUT------------------------------------

mysql> select * from emp_back;
Empty set (0.00 sec)

mysql> select * from emp;
+-------+--------+-----------+------+------------+---------+---------+--------+
| EMPNO | ENAME  | JOB       | MGR  | HIREDATE   | SAL     | COMM    | DEPTNO |
+-------+--------+-----------+------+------------+---------+---------+--------+
|  7369 | SMITH  | CLERK     | 7902 | 1980-12-17 |  800.00 |    NULL |     20 |
|  7499 | ALLEN  | SALESMAN  | 7698 | 1981-02-20 | 1600.00 |  300.00 |     30 |
|  7521 | WARD   | SALESMAN  | 7698 | 1981-02-22 | 1250.00 |  500.00 |     30 |
|  7566 | JONES  | MANAGER   | 7839 | 1981-04-02 | 2975.00 |    NULL |     20 |
|  7654 | MARTIN | SALESMAN  | 7698 | 1981-09-28 | 1250.00 | 1400.00 |     30 |
|  7698 | BLAKE  | MANAGER   | 7839 | 1981-05-01 | 2850.00 |    NULL |     30 |
|  7782 | CLARK  | MANAGER   | 7839 | 1981-06-09 | 2450.00 |    NULL |     10 |
|  7788 | SCOTT  | ANALYST   | 7566 | 1982-12-09 | 3000.00 |    NULL |     20 |
|  7839 | KING   | PRESIDENT | NULL | 1981-11-17 | 5000.00 |    NULL |     10 |
|  7844 | TURNER | SALESMAN  | 7698 | 1981-09-08 | 1500.00 |    0.00 |     30 |
|  7876 | ADAMS  | CLERK     | 7788 | 1983-01-12 | 1100.00 |    NULL |     20 |
|  7900 | JAMES  | CLERK     | 7698 | 1981-12-03 |  950.00 |    NULL |     30 |
|  7902 | FORD   | ANALYST   | 7566 | 1981-12-03 | 3000.00 |    NULL |     20 |
|  7934 | MILLER | CLERK     | 7782 | 1982-01-23 | 1300.00 |    NULL |     10 |
+-------+--------+-----------+------+------------+---------+---------+--------+
14 rows in set (0.00 sec)

mysql> call updateSal(7369);
Query OK, 1 row affected (0.09 sec)

mysql> select * from emp;\
+-------+--------+-----------+------+------------+---------+---------+--------+
| EMPNO | ENAME  | JOB       | MGR  | HIREDATE   | SAL     | COMM    | DEPTNO |
+-------+--------+-----------+------+------------+---------+---------+--------+
|  7369 | SMITH  | CLERK     | 7902 | 1980-12-17 | 1000.00 |    NULL |     20 |
|  7499 | ALLEN  | SALESMAN  | 7698 | 1981-02-20 | 1600.00 |  300.00 |     30 |
|  7521 | WARD   | SALESMAN  | 7698 | 1981-02-22 | 1250.00 |  500.00 |     30 |
|  7566 | JONES  | MANAGER   | 7839 | 1981-04-02 | 2975.00 |    NULL |     20 |
|  7654 | MARTIN | SALESMAN  | 7698 | 1981-09-28 | 1250.00 | 1400.00 |     30 |
|  7698 | BLAKE  | MANAGER   | 7839 | 1981-05-01 | 2850.00 |    NULL |     30 |
|  7782 | CLARK  | MANAGER   | 7839 | 1981-06-09 | 2450.00 |    NULL |     10 |
|  7788 | SCOTT  | ANALYST   | 7566 | 1982-12-09 | 3000.00 |    NULL |     20 |
|  7839 | KING   | PRESIDENT | NULL | 1981-11-17 | 5000.00 |    NULL |     10 |
|  7844 | TURNER | SALESMAN  | 7698 | 1981-09-08 | 1500.00 |    0.00 |     30 |
|  7876 | ADAMS  | CLERK     | 7788 | 1983-01-12 | 1100.00 |    NULL |     20 |
|  7900 | JAMES  | CLERK     | 7698 | 1981-12-03 |  950.00 |    NULL |     30 |
|  7902 | FORD   | ANALYST   | 7566 | 1981-12-03 | 3000.00 |    NULL |     20 |
|  7934 | MILLER | CLERK     | 7782 | 1982-01-23 | 1300.00 |    NULL |     10 |
+-------+--------+-----------+------+------------+---------+---------+--------+
14 rows in set (0.00 sec)

mysql> select * from emp_back;
+-------+-------+-------+------+------------+---------+------+--------+
| EMPNO | ENAME | JOB   | MGR  | HIREDATE   | SAL     | COMM | DEPTNO |
+-------+-------+-------+------+------------+---------+------+--------+
|  7369 | SMITH | CLERK | 7902 | 1980-12-17 | 1000.00 | NULL |     20 |
+-------+-------+-------+------+------------+---------+------+--------+
1 row in set (0.00 sec)

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


6. Write a procedure and a function.
Function: This function will return years of experience for a
emp. This function will take the
empid of the emp as an input parameter. The output will be
rounded to the nearest year
(1.4 year will be considered as 1 year and 1.5 year will be
considered as 2 year).

Procedure: Capture the value returned by the above
function to calculate the additional
allowance for the emp based on the experience.
Additional Allowance = Year of experience x 3000
Calculate the additional allowance and store Emp_num,
Date of Joining, and Experience in
years and additional allowance in Emp_Allowance table.


delimiter //
create function calcXP(empid int) returns int
begin

declare vexp int default 0;

select round(datediff(curdate(),hiredate)/365) into vexp from emp where empid=empno;

return vexp;

end//

delimiter ;


delimiter //
create procedure calcAllowance(empid int)
begin

declare vempno,vsal,vexp int default 0;
declare vhiredate date;
declare addAllo int default 0;
select empno,sal,hiredate,calcXP(empid) into vempno,vsal,vhiredate,vexp from emp where empno = empid;
set addAllo = (vexp*3000);

insert into emp_allowance values(addAllo,vhiredate,vexp);
select addAllo;

end//
delimiter ;



output------------------
mysql> call calcAllowance(7839);
+---------+
| addAllo |
+---------+
|  114000 |
+---------+
1 row in set (0.05 sec)

Query OK, 0 rows affected (0.05 sec)

mysql> select * from emp_allowance;
+-----------+------------+------+
| allowance | hiredate   | xp   |
+-----------+------------+------+
|    114000 | 1981-11-17 |   38 |
+-----------+------------+------+
1 row in set (0.00 sec)

mysql>





--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Q2. Trigger
1. Write a trigger which add entry in audit table when user
tries to insert or delete records in employee table on sat
or sun

delimiter //
create trigger addAuditOnSatSun after insert on emp
FOR EACH ROW
	if dayname(curdate()) = 'Saturday' or dayname(curdate()) = 'Sunday' then
		insert into emp_back values(NEW.EMPNO,NEW.ENAME,NEW.JOB,NEW.MGR,NEW.HIREDATE,NEW.SAL,NEW.COMM,NEW.DEPTNO);
	end if//
delimiter ;



2. Create table order_history. Write a trigger to store old
qty and old cost of order in history table before you
update qty and cost of order.


delimiter //
create trigger updateOrder after update on inventory
FOR EACH ROW
		insert into order_history values(old.pqty,new.pqty,old.pcost,new.pcost);
//
delimiter ;


---------------OUPUT---------------
mysql> show triggers;
+-------------+--------+-----------+-------------------------------------------------------------------------+--------+------------------------+--------------------------------------------+----------------+----------------------+----------------------+--------------------+
| Trigger     | Event  | Table     | Statement                                                               | Timing | Created                | sql_mode                                   | Definer        | character_set_client | collation_connection | Database Collation |
+-------------+--------+-----------+-------------------------------------------------------------------------+--------+------------------------+--------------------------------------------+----------------+----------------------+----------------------+--------------------+
| updateOrder | UPDATE | inventory | insert into order_history values(old.pqty,new.pqty,old.pcost,new.pcost) | AFTER  | 2019-09-29 15:47:43.97 | STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION | root@localhost | cp850                | cp850_general_ci     | utf8mb4_0900_ai_ci |
+-------------+--------+-----------+-------------------------------------------------------------------------+--------+------------------------+--------------------------------------------+----------------+----------------------+----------------------+--------------------+
1 row in set (0.00 sec)

mysql> select * from inventory;
+------+-------------+------+---------+
| pid  | pname       | pqty | pcost   |
+------+-------------+------+---------+
|    1 | moblie      |   10 | 8000.00 |
|    2 | smart watch |   20 |  500.00 |
|    3 | headphones  |   15 |  700.00 |
+------+-------------+------+---------+
3 rows in set (0.00 sec)

mysql> select * from order_history;
Empty set (0.00 sec)

mysql> update inventory set pqty=12 where pid=2;
Query OK, 1 row affected (0.06 sec)
Rows matched: 1  Changed: 1  Warnings: 0

mysql> select * from inventory;
+------+-------------+------+---------+
| pid  | pname       | pqty | pcost   |
+------+-------------+------+---------+
|    1 | moblie      |   10 | 8000.00 |
|    2 | smart watch |   12 |  500.00 |
|    3 | headphones  |   15 |  700.00 |
+------+-------------+------+---------+
3 rows in set (0.00 sec)

mysql> select * from order_history;
+--------+--------+---------+---------+
| oldqty | newqty | oldcost | newcost |
+--------+--------+---------+---------+
|     20 |     12 |  500.00 |  500.00 |
+--------+--------+---------+---------+
1 row in set (0.00 sec)

mysql>